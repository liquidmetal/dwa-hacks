// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fish-sim.proto

#ifndef PROTOBUF_fish_2dsim_2eproto__INCLUDED
#define PROTOBUF_fish_2dsim_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fish_2dsim_2eproto();
void protobuf_AssignDesc_fish_2dsim_2eproto();
void protobuf_ShutdownFile_fish_2dsim_2eproto();

class FishSim;

// ===================================================================

class FishSim : public ::google::protobuf::Message {
 public:
  FishSim();
  virtual ~FishSim();

  FishSim(const FishSim& from);

  inline FishSim& operator=(const FishSim& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishSim& default_instance();

  void Swap(FishSim* other);

  // implements Message ----------------------------------------------

  FishSim* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishSim& from);
  void MergeFrom(const FishSim& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float pos_x = 1;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 1;
  inline float pos_x() const;
  inline void set_pos_x(float value);

  // required float pos_y = 2;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 2;
  inline float pos_y() const;
  inline void set_pos_y(float value);

  // required float pos_z = 3;
  inline bool has_pos_z() const;
  inline void clear_pos_z();
  static const int kPosZFieldNumber = 3;
  inline float pos_z() const;
  inline void set_pos_z(float value);

  // required float orient_x = 4;
  inline bool has_orient_x() const;
  inline void clear_orient_x();
  static const int kOrientXFieldNumber = 4;
  inline float orient_x() const;
  inline void set_orient_x(float value);

  // required float orient_y = 5;
  inline bool has_orient_y() const;
  inline void clear_orient_y();
  static const int kOrientYFieldNumber = 5;
  inline float orient_y() const;
  inline void set_orient_y(float value);

  // required float orient_z = 6;
  inline bool has_orient_z() const;
  inline void clear_orient_z();
  static const int kOrientZFieldNumber = 6;
  inline float orient_z() const;
  inline void set_orient_z(float value);

  // @@protoc_insertion_point(class_scope:FishSim)
 private:
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_pos_z();
  inline void clear_has_pos_z();
  inline void set_has_orient_x();
  inline void clear_has_orient_x();
  inline void set_has_orient_y();
  inline void clear_has_orient_y();
  inline void set_has_orient_z();
  inline void clear_has_orient_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float pos_x_;
  float pos_y_;
  float pos_z_;
  float orient_x_;
  float orient_y_;
  float orient_z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fish_2dsim_2eproto();
  friend void protobuf_AssignDesc_fish_2dsim_2eproto();
  friend void protobuf_ShutdownFile_fish_2dsim_2eproto();

  void InitAsDefaultInstance();
  static FishSim* default_instance_;
};
// ===================================================================


// ===================================================================

// FishSim

// required float pos_x = 1;
inline bool FishSim::has_pos_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishSim::set_has_pos_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishSim::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishSim::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline float FishSim::pos_x() const {
  return pos_x_;
}
inline void FishSim::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
}

// required float pos_y = 2;
inline bool FishSim::has_pos_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishSim::set_has_pos_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishSim::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishSim::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline float FishSim::pos_y() const {
  return pos_y_;
}
inline void FishSim::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
}

// required float pos_z = 3;
inline bool FishSim::has_pos_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishSim::set_has_pos_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishSim::clear_has_pos_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishSim::clear_pos_z() {
  pos_z_ = 0;
  clear_has_pos_z();
}
inline float FishSim::pos_z() const {
  return pos_z_;
}
inline void FishSim::set_pos_z(float value) {
  set_has_pos_z();
  pos_z_ = value;
}

// required float orient_x = 4;
inline bool FishSim::has_orient_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishSim::set_has_orient_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishSim::clear_has_orient_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishSim::clear_orient_x() {
  orient_x_ = 0;
  clear_has_orient_x();
}
inline float FishSim::orient_x() const {
  return orient_x_;
}
inline void FishSim::set_orient_x(float value) {
  set_has_orient_x();
  orient_x_ = value;
}

// required float orient_y = 5;
inline bool FishSim::has_orient_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishSim::set_has_orient_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishSim::clear_has_orient_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishSim::clear_orient_y() {
  orient_y_ = 0;
  clear_has_orient_y();
}
inline float FishSim::orient_y() const {
  return orient_y_;
}
inline void FishSim::set_orient_y(float value) {
  set_has_orient_y();
  orient_y_ = value;
}

// required float orient_z = 6;
inline bool FishSim::has_orient_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FishSim::set_has_orient_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FishSim::clear_has_orient_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FishSim::clear_orient_z() {
  orient_z_ = 0;
  clear_has_orient_z();
}
inline float FishSim::orient_z() const {
  return orient_z_;
}
inline void FishSim::set_orient_z(float value) {
  set_has_orient_z();
  orient_z_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fish_2dsim_2eproto__INCLUDED
